#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –±–ª–æ–≥–∞ researched.xyz –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
# –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ

set -e

echo "üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –±–ª–æ–≥–∞ researched.xyz..."

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DOMAIN="researched.xyz"
BLOG_DOMAIN="blog.researched.xyz"
WP_PATH="/var/www/blog"
NGINX_PATH="/etc/nginx/sites-available"
SSL_EMAIL="admin@researched.xyz"

echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    systemctl enable docker
    systemctl start docker
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
fi

echo "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"

echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p $WP_PATH
mkdir -p /var/log/wordpress
mkdir -p /etc/letsencrypt

echo "üì¶ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞..."
cd $WP_PATH
if [ ! -d ".git" ]; then
    git clone https://github.com/VladosG155-prog/researched-blog.git .
else
    git pull origin main
fi

echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞..."

# –û–±–Ω–æ–≤–ª—è–µ–º docker-compose.yml –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
cat > docker-compose.yml << 'EOF'
services:
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./data/html:/var/www/html
      - ./logs/nginx:/var/log/nginx
      - /etc/letsencrypt:/etc/letsencrypt:ro
    ports:
      - "80:80"
      - "443:443"
    links:
      - wordpress
    restart: unless-stopped

  wordpress:
    depends_on:
      - db
      - redis
    image: wordpress:fpm
    volumes:
      - ./data/html:/var/www/html
      - ./uploads.ini:/usr/local/etc/php/conf.d/uploads.ini
    restart: unless-stopped
    environment:
      WORDPRESS_TABLE_PREFIX: rxz_42_
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: researched
      WORDPRESS_DB_PASSWORD: ${DB_PASSWORD}
      WORDPRESS_DB_NAME: wordpress
      WORDPRESS_CONFIG_EXTRA: |
        define('WP_REDIS_HOST', 'redis');
        define('WP_REDIS_PORT', 6379);
        define('WP_CACHE', true);

  db:
    image: mysql:8.0
    volumes:
      - ./data/mysql:/var/lib/mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: wordpress
      MYSQL_USER: researched
      MYSQL_PASSWORD: ${DB_PASSWORD}
    command: --default-authentication-plugin=mysql_native_password

  redis:
    image: redis:7-alpine
    volumes:
      - ./data/redis:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  elasticsearch:
    image: bitnami/elasticsearch:8.11.1
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped

volumes:
  elasticsearch_data:
EOF

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Nginx –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
cat > nginx/nginx.conf << 'EOF'
server {
    listen 80;
    server_name blog.researched.xyz;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name blog.researched.xyz;

    ssl_certificate /etc/letsencrypt/live/blog.researched.xyz/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/blog.researched.xyz/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;

    root /var/www/html;
    index index.php;

    access_log /var/log/nginx/blog-access.log;
    error_log /var/log/nginx/blog-error.log;

    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|webp)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass wordpress:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_read_timeout 300;
    }

    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ñ–∞–π–ª–∞–º
    location ~ /\. {
        deny all;
    }

    location ~* /(?:uploads|files)/.*\.php$ {
        deny all;
    }
}
EOF

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é PHP –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
cat > uploads.ini << 'EOF'
file_uploads = On
memory_limit = 256M
upload_max_filesize = 64M
post_max_size = 64M
max_execution_time = 300
max_input_vars = 3000
EOF

echo "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
if [ ! -f ".env" ]; then
    cat > .env << EOF
DB_PASSWORD=$(openssl rand -base64 32)
DB_ROOT_PASSWORD=$(openssl rand -base64 32)
EOF
    echo "‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–∞—Ä–æ–ª–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
fi

source .env

echo "üåê –ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
if [ ! -f "/etc/letsencrypt/live/${BLOG_DOMAIN}/fullchain.pem" ]; then
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º nginx –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    docker-compose up -d nginx

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    docker run --rm \
        -v /etc/letsencrypt:/etc/letsencrypt \
        -v /var/lib/letsencrypt:/var/lib/letsencrypt \
        -p 80:80 \
        certbot/certbot certonly \
        --standalone \
        --agree-tos \
        --email $SSL_EMAIL \
        -d $BLOG_DOMAIN

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π nginx
    docker-compose down
fi

echo "üê≥ –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose up -d

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 30

echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose ps

echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
# –ü—Ä–æ–≤–µ—Ä–∫–∞ WordPress
if curl -f -s "https://${BLOG_DOMAIN}/wp-admin/install.php" > /dev/null; then
    echo "‚úÖ WordPress –∑–∞–ø—É—â–µ–Ω"
else
    echo "‚ùå WordPress –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Elasticsearch
if curl -f -s "http://localhost:9200/_cluster/health" > /dev/null; then
    echo "‚úÖ Elasticsearch –∑–∞–ø—É—â–µ–Ω"
else
    echo "‚ùå Elasticsearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

echo "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
(crontab -l 2>/dev/null; echo "0 3 * * * certbot renew --quiet && docker-compose restart nginx") | crontab -

echo "üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
cat > /etc/systemd/system/blog-monitor.service << 'EOF'
[Unit]
Description=Blog Monitoring
After=network.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/check-blog-health.sh

[Install]
WantedBy=multi-user.target
EOF

cat > /usr/local/bin/check-blog-health.sh << 'EOF'
#!/bin/bash
BLOG_URL="https://blog.researched.xyz"
WEBHOOK_URL="YOUR_SLACK_WEBHOOK_URL"

if ! curl -f -s "$BLOG_URL" > /dev/null; then
    curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"üö® –ë–ª–æ–≥ researched.xyz –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!"}' \
        "$WEBHOOK_URL"
fi
EOF

chmod +x /usr/local/bin/check-blog-health.sh

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
(crontab -l 2>/dev/null; echo "*/5 * * * * /usr/local/bin/check-blog-health.sh") | crontab -

echo "üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è..."
cat > /usr/local/bin/backup-blog.sh << 'EOF'
#!/bin/bash
BACKUP_DIR="/backups/blog"
DATE=$(date +%Y%m%d_%H%M%S)

mkdir -p $BACKUP_DIR

# Backup database
docker-compose exec -T db mysqldump -u researched -p$DB_PASSWORD wordpress > "$BACKUP_DIR/db_$DATE.sql"

# Backup files
tar -czf "$BACKUP_DIR/files_$DATE.tar.gz" ./data/html/wp-content/

# Clean old backups (keep 7 days)
find $BACKUP_DIR -name "*.sql" -mtime +7 -delete
find $BACKUP_DIR -name "*.tar.gz" -mtime +7 -delete

echo "Backup completed: $DATE"
EOF

chmod +x /usr/local/bin/backup-blog.sh

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø –≤ 2:00
(crontab -l 2>/dev/null; echo "0 2 * * * cd $WP_PATH && /usr/local/bin/backup-blog.sh") | crontab -

echo "üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudflare (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)..."
echo "–î–æ–±–∞–≤—å—Ç–µ A-–∑–∞–ø–∏—Å—å –≤ Cloudflare:"
echo "blog.researched.xyz -> $(curl -s ifconfig.me)"

echo ""
echo "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://${BLOG_DOMAIN}/wp-admin/"
echo "2. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É WordPress"
echo "3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–ª–∞–≥–∏–Ω—ã –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç"
echo "4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Cloudflare DNS"
echo "5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏"
echo ""
echo "üìä –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "docker-compose logs -f          # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo "docker-compose restart          # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "docker-compose down && docker-compose up -d  # –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
echo ""
echo "üìÅ –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
echo "- WordPress: /var/www/blog/data/html/"
echo "- –õ–æ–≥–∏: /var/www/blog/logs/"
echo "- –ë—ç–∫–∞–ø—ã: /backups/blog/"
echo ""
echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!"